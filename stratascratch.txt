
##################################
# No: 1                          #
# Date: 28 Mar 2023              #
# ID: ID 9726                    #
# Q Name: Classify Business Type #
# Diff: Medium                   #
##################################

SELECT
    DISTINCT business_name,
    CASE
        WHEN business_name LIKE '%restaurant%' THEN 'restaurant'
        WHEN business_name LIKE '%cafe%' 
        OR business_name LIKE '%cafÃ©%' 
        OR business_name LIKE '%coffee%' THEN 'cafe'
        WHEN business_name LIKE '%school%' THEN 'school'
        ELSE 'other'
    END AS business_type
FROM
    sf_restaurant_health_violations;
    

##################################
# No: 2                          #
# Date: 29 Mar 2023              #
# ID: ID 9728                    #
# Q Name: Number of violations   #
# Diff: Medium                   #
##################################

SELECT 
    COUNT(*) num_of_violations,
    YEAR(inspection_date) year
FROM 
    sf_restaurant_health_violations
    
WHERE
    business_name = 'Roxanne Cafe' AND
    violation_id IS NOT NULL
GROUP BY YEAR(inspection_date);


###############################################
# No: 3                                       #
# Date: 30 Mar 2023                           #
# ID: ID 10353                                #
# Q Name: Workers With The Highest Salaries   #
# Diff: Medium                                #
###############################################

SELECT
    worker_title
FROM worker w
LEFT JOIN title t
ON w.worker_id = worker_ref_id
WHERE salary = (SELECT MAX(salary) FROM worker)
;


##################################
# No: 4                          #
# Date: 31 Mar 2023              #
# ID: ID 10308                   #
# Q Name: Salaries Differences   #
# Diff: Easy                     #
##################################


-- WITH cte1 AS (
--     SELECT MAX(salary) salary
--     FROM db_employee e
--     JOIN db_dept d
--     ON e.department_id = d.id
--     WHERE d.department = 'marketing'
--     GROUP BY d.department
-- ), cte2 AS(
--     SELECT MAX(salary) salary
--     FROM db_employee e
--     JOIN db_dept d
--     ON e.department_id = d.id
--     WHERE d.department = 'engineering'
--     GROUP BY d.department
-- )
-- SELECT ABS(cte1.salary - cte2.salary)
-- FROM cte1, cte2
-- ;

SELECT
    ABS(
    MAX(CASE WHEN department = 'marketing' THEN salary END) - 
    MAX(CASE WHEN department = 'engineering' THEN salary END)
    ) AS highest_salary_diff
FROM db_employee e 
JOIN db_dept d
ON e.department_id = d.id;


###########################################
# No: 5                                   #
# Date: 03 Apr 2023                       #
# ID: ID 10319                            #
# Q Name: Monthly Percentage Difference   #
# Diff: Hard                              #
###########################################

-- only year 2019

WITH cte1 AS(
    SELECT SUM(value) revenue, SUBSTRING(created_at, 1, 7) year_month
    FROM sf_transactions
    GROUP BY MONTH(created_at), SUBSTRING(created_at, 1, 7)
), cte2 AS(
    SELECT *, LAG(revenue,1) OVER(ORDER BY year_month) prev_mth_revenue
    FROM cte1
)
SELECT year_month, revenue, prev_mth_revenue,
    ROUND((CAST(revenue - prev_mth_revenue AS FLOAT) / prev_mth_revenue) * 100, 2) mom_percentage_change
FROM cte2

;



###########################################
# No: 6                                   #
# Date: 04 Apr 2023                       #
# ID: ID 9913                             #
# Q Name: Order Details                   #
# Diff: Easy                              #
###########################################

SELECT
    first_name,
    order_date,
    order_details,
    total_order_cost
FROM customers c
JOIN orders o 
ON c.id = o.cust_id
WHERE first_name IN ('Jill', 'Eva')
ORDER BY cust_id
;


###########################################
# No: 7                                   #
# Date: 05 Apr 2023                       #
# ID: ID 9894                             #
# Q Name: Employee and Manager Salaries   #
# Diff: Medium                            #
###########################################


SELECT 
    e.first_name, e.salary
FROM employee e
JOIN employee m
ON e.manager_id = m.id
WHERE e.salary > m.salary
-- If bonus is included
-- WHERE e.salary + e.bonus > m.salary + m.bonus
;

-- Avoid use self join without WHERE clause, it provides the sqaure of the original number of records
-- There are 30 records in a table and when I use self join on it, the output of self join is 900 records 

-- SELECT 
--    e.first_name, e.salary
-- FROM employee e, employee m
-- WHERE e.manager_id = m.id AND e.salary > m.salary
-- If bonus is included
-- WHERE e.manager_id = m.id AND e.salary + e.bonus > m.salary + m.bonus
;


###########################################
# No: 8                                   #
# Date: 10 Apr 2023                       #
# ID: ID 10061                            #
# Q Name: Popularity of Hack              #
# Diff: Easy                              #
###########################################

SELECT
    location,
    AVG(CAST(popularity AS FLOAT)) avg_popularity
FROM facebook_employees e
JOIN facebook_hack_survey s
ON e.id = s.employee_id
GROUP BY location
;

###########################################
# No: 9                                   #
# Date: 11 - 13 Apr 2023                  #
# ID: ID 10285                            #
# Q Name: Acceptance Rate By Date         #
# Diff: Medium ???                        #
###########################################

WITH c_sent AS(
SELECT * FROM fb_friend_requests
WHERE action = 'sent'
), c_acc AS(
SELECT * FROM fb_friend_requests
WHERE action = 'accepted'
)
-- the total number of sent reuests is equal to the total number of rows
SELECT
    c_sent.date date,
    CAST(COUNT(c_acc.date) AS FLOAT) / CAST(COUNT(c_sent.date) AS FLOAT) accpetance_rate
FROM c_sent
LEFT JOIN c_acc
ON c_sent.user_id_sender = c_acc.user_id_sender AND
c_sent.user_id_receiver = c_acc.user_id_receiver
GROUP BY c_sent.date
ORDER BY c_sent.date
;

###########################################
# No: 10                                  #
# Date: 14 Apr 2023                       #
# ID: ID 9782                             #
# Q Name: Customer Revenue In March       #
# Diff: Medium                            #
###########################################

SELECT
    cust_id,
    SUM(total_order_cost) total_revenue
FROM orders
WHERE MONTH(order_date) = 3
GROUP BY cust_id
ORDER BY SUM(total_order_cost) DESC
;

###########################################
# No: 11                                  #
# Date: 17 Apr 2023                       #
# ID: ID 10064                            #
# Q Name: Highest Energy Consumption      #
# Diff: Medium                            #
###########################################

WITH c1 AS(
    SELECT * FROM fb_eu_energy
    UNION
    SELECT * FROM fb_asia_energy
    UNION
    SELECT * FROM fb_na_energy
), c2 AS(
    SELECT date, 
        SUM(consumption) total_consumption, 
        dense_rank() OVER (ORDER BY SUM(consumption) DESC) as ranking
    FROM c1
    GROUP BY date
) 
SELECT date, total_consumption
FROM c2
WHERE ranking = 1
;

###########################################
# No: 12                                  #
# Date: 18 Apr 2023                       #
# ID: ID 10352                            #
# Q Name: Users By Average Session Time   #
# Diff: Medium? Hard?                     #
###########################################

WITH c1 AS(
SELECT
    user_id,
    DATEDIFF(
        second,
        MAX(CASE WHEN action = 'page_load' THEN timestamp END),
        MIN(CASE WHEN action = 'page_exit' THEN timestamp END)
        ) AS session_time
FROM facebook_web_log
GROUP BY user_id, CAST(timestamp AS DATE)
)
SELECT user_id, AVG(CAST(session_time AS FLOAT))
FROM c1
WHERE session_time IS NOT NULL
GROUP BY user_id
;

###########################################
# No: 13                                  #
# Date: 19 Apr 2023                       #
# ID: ID 10284                            #
# Q Name: Popularity Percentage           #
# Diff: Hard? Seems Medium                #
###########################################

WITH c1 AS(
SELECT user1 FROM facebook_friends
UNION ALL
SELECT user2 FROM facebook_friends
)
SELECT *, CAST(COUNT(*) AS FLOAT)/(SELECT COUNT(DISTINCT(user1)) FROM c1) * 100 AS popularity_rate
FROM c1
GROUP BY user1
;

###########################################
# No: 14                                  #
# Date: 20 Apr 2023                       #
# ID: ID 10299, 10128, 9917               #
# Q Name: Finding Updated Records,        #
# Q Name: Count the number of... ,        #
# Q Name: Average Salaries                #
# Diff: Easy                              #
###########################################

SELECT id, first_name, last_name, department_id, MAX(salary) current_salary
FROM ms_employee_salary
GROUP BY id, first_name, last_name, department_id;

--

SELECT COUNT(*)
FROM oscar_nominees
WHERE nominee = 'Abigail Breslin';

--

WITH cte AS(
    SELECT department, AVG(CAST(salary AS FLOAT)) dept_avg_salary FROM employee
    GROUP BY department
)
SELECT e.department, first_name, salary, dept_avg_salary
FROM employee e
JOIN cte c
ON e.department = c.department

OR

SELECT department, first_name, salary, AVG(CAST(salary AS FLOAT)) OVER(PARTITION BY department) avg_dept_salary
FROM employee;

###########################################
# No: 15                                  #
# Date: 21 Apr 2023                       #
# ID: ID 10300                            #
# Q Name: Premium vs Freemium             #
# Diff: Hard                              #
###########################################

WITH c1 AS(
    SELECT date, 
    SUM(CASE WHEN paying_customer = 'no' THEN downloads END) AS non_paying,
    SUM(CASE WHEN paying_customer = 'yes' THEN downloads END) AS paying
    FROM ms_user_dimension u
    JOIN ms_acc_dimension a ON u.acc_id = a.acc_id 
    JOIN ms_download_facts d ON u.user_id = d.user_id
    GROUP BY date
) 
SELECT *
FROM c1
WHERE non_paying > paying
ORDER BY date
;

###########################################
# No: 16                                  #
# Date: 24 Apr 2023                       #
# ID: ID 9905                             #
# Q Name: Highest Target Under Manager    #
# Diff: Medium                            #
###########################################

-- 0.02468 seconds
SELECT first_name, target
FROM (SELECT *, DENSE_RANK() OVER(ORDER BY target DESC) highest_target
FROM salesforce_employees
WHERE manager_id = 13) s
WHERE highest_target = 1;

-- 0.01555 seconds
SELECT first_name, target
FROM salesforce_employees
WHERE target = (SELECT MAX(target) FROM salesforce_employees WHERE manager_id = 13) AND manager_id = 13;


###################################################
# No: 17                                          #
# Date: 26 Apr 2023                               #
# ID: ID 9650                                     #
# Q Name: Find the top 10 ranked songs in 2010    #
# Diff: Medium                                    #
###################################################

SELECT TOP 10 year_rank, group_name, song_name
FROM billboard_top_100_year_end
WHERE year = 2010
GROUP BY year_rank, group_name, song_name
ORDER BY year_rank
;

###############################
# No: 18                      #
# Date: 27 Apr 2023           #
# ID: ID 9991                 #
# Q Name: Top Ranked Songs    #
# Diff: Medium                #
###############################

SELECT trackname, COUNT(*)
FROM spotify_worldwide_daily_song_ranking
WHERE position = 1
GROUP BY trackname
ORDER BY COUNT(*) DESC
;

###########################################
# No: 19                                  #
# Date: 28 Apr 2023                       #
# ID: ID 9897                             #
# Q Name: Highest Salary in Department    #
# Diff: Medium                            #
###########################################

-- 0.02014 seconds

WITH cte AS(
    SELECT 
        DISTINCT department,
        MAX(salary) OVER(PARTITION BY department) highest_salary
    FROM employee
)
SELECT 
    e.department, first_name, c.highest_salary
FROM employee e
JOIN cte c
ON e.department = c.department AND e.salary = c.highest_salary
;

###########################################
# No: 20                                  #
# Date: 01 May 2023                       #
# ID: ID 10026                            #
# Q Name: Find all wineries               #
# Diff: Medium                            #
###########################################

SELECT DISTINCT winery
FROM winemag_p1
WHERE 
    LOWER(description) LIKE '%[^A-Z]plum[^A-Z]%' OR
    LOWER(description) LIKE '%[^A-Z]cherry[^A-Z]%' OR
    LOWER(description) LIKE '%[^A-Z]rose[^A-Z]%' OR
    LOWER(description) LIKE '%[^A-Z]hazelnut[^A-Z]%'
    -- no plural?
    -- LOWER(description) LIKE '%[^A-Z]cherr[^A-Z]%' OR
    -- LOWER(description) LIKE '%[^A-Z]cherries[^A-Z]%' OR
;

###########################################
# No: 21                                  #
# Date: 02 May 2023                       #
# ID: ID 10049                            #
# Q Name: Reviews of Categories           #
# Diff: Medium                            #
###########################################

-- https://www.sqlservertutorial.net/sql-server-string-functions/sql-server-string_split-function/

SELECT value category, SUM(review_count) total_review
FROM yelp_business
CROSS APPLY STRING_SPLIT(categories, ';')
GROUP BY value
ORDER BY SUM(review_count) DESC
;

#############################################
# No: 22                                    #
# Date: 03 May 2023                         #
# ID: ID 10048, 10060                       #
# Q Name: Top Businesses With Most Reviews, #
# Top Cool Votes                            #
# Diff: Medium                              #
#############################################

SELECT TOP 5 name, SUM(review_count) num_reviews 
FROM yelp_business
GROUP BY name
ORDER BY SUM(review_count) DESC;

SELECT business_name, review_text
FROM yelp_reviews
WHERE cool = (SELECT MAX(cool) FROM yelp_reviews);


################################################
# No: 23                                       #
# Date: 04 May 2023                            #
# ID: ID 10046                                 #
# Q Name: Top 5 States With 5 Star Businesses  #
# Diff: Hard                                   #
################################################

-- The description for the question should be clearer 

WITH cte AS (
    SELECT 
        state, 
        COUNT(stars) num_businesses, 
        DENSE_RANK() OVER (ORDER BY COUNT(stars) DESC) star_rank
    FROM yelp_business
    WHERE stars = 5
    GROUP BY state
)
SELECT state, num_businesses
FROM cte
WHERE star_rank < 5
-- WHERE star_rank < 6
;

#######################################
# No: 24                              #
# Date: 05 May 2023                   #
# ID: ID 9814                         #
# Q Name: Counting Instances in Text  #
# Diff: Hard                          #
#######################################

SELECT 'bull' word, COUNT(*) 'count'
FROM google_file_store
WHERE contents LIKE '%bull%'
UNION ALL
SELECT 'bear' word, COUNT(*) 'count'
FROM google_file_store
WHERE contents LIKE '%bear%'
;


###########################################
# No: 25                                  #
# Date: 08 May 2023                       #
# ID: ID 10078                            #
# Q Name: Find matching hosts and guests  #
# Diff: Medium                            #
###########################################

SELECT DISTINCT host_id, guest_id
FROM airbnb_hosts h
JOIN airbnb_guests g
ON h.nationality = g.nationality AND h.gender = g.gender;

###########################################
# No: 26                                  #
# Date: 09 May 2023                       #
# ID: ID 9781                            #
# Q Name: Find the rate of processed      #
#         tickets for each type           #
# Diff: Medium                            #
###########################################

SELECT 
    type, 
    AVG(CAST(CASE WHEN processed = 'TRUE' THEN 1 ELSE 0 END AS FLOAT)) processed_rate
FROM facebook_complaints
GROUP BY type
;

###########################################
# No: 27                                  #
# Date: 11 May 2023                       #
# ID: ID 10159                            #
# Q Name: Ranking Most Active Guests      #
# Diff: Medium                            #
###########################################

SELECT 
    DENSE_RANK() OVER(ORDER BY SUM(n_messages) DESC) ranking, 
    id_guest,
    SUM(n_messages)
FROM airbnb_contacts
GROUP BY id_guest;


###########################################
# No: 28                                  #
# Date: 12 May 2023                       #
# ID: ID 10077                            #
# Q Name: Income By Title and Gender      #
# Diff: Medium                            #
###########################################

-- SUM(bonus) is used because the questions is asking the average TOTAL compensation
SELECT employee_title, sex, AVG(salary+bonus) total_compensation
FROM (SELECT employee_title, sex, salary, SUM(bonus) bonus
FROM sf_employee e
JOIN sf_bonus b
ON e.id = b.worker_ref_id
GROUP BY employee_title, sex, salary) s
GROUP BY employee_title, sex
;

###########################################
# No: 29                                  #
# Date: 15 May 2023                       #
# ID: ID 10354                            #
# Q Name: Most Profitable Companies       #
# Diff: Medium                            #
###########################################

SELECT TOP 3
company, profits, DENSE_RANK() OVER(ORDER BY profits DESC) profit_rank
FROM forbes_global_2010_2014;

###########################################
# No: 30                                  #
# Date: 16 May 2023                       #
# ID: ID 10156                            #
# Q Name: Number of Units Per Nationality #
# Diff: Medium                            #
###########################################

SELECT DISTINCT nationality, 
    COUNT(unit_id) OVER(PARTITION BY nationality) num_units
FROM airbnb_hosts h
JOIN airbnb_units u
ON h.host_id = u.host_id
WHERE age < 30 AND LOWER(unit_type) = 'apartment'
GROUP BY nationality, unit_id
ORDER BY 2 DESC;

###########################################
# No: 31                                  #
# Date: 17 May 2023                       #
# ID: ID 9942                             #
# Q Name: Largest Olympics                #
# Diff: Medium                            #
###########################################

-- In case, there are the same number of participating athletes
WITH cte AS(
SELECT games, COUNT(DISTINCT id) num_athlete, 
    DENSE_RANK() OVER(ORDER BY COUNT(DISTINCT id) DESC) ranking
FROM olympics_athletes_events
GROUP BY games
)
SELECT * FROM cte WHERE ranking = 1;
