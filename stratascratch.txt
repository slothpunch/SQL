
##################################
# No: 1                          #
# Date: 28 Mar 2023              #
# ID: ID 9726                    #
# Q Name: Classify Business Type #
# Diff: Medium                   #
##################################

SELECT
    DISTINCT business_name,
    CASE
        WHEN business_name LIKE '%restaurant%' THEN 'restaurant'
        WHEN business_name LIKE '%cafe%' 
        OR business_name LIKE '%cafÃ©%' 
        OR business_name LIKE '%coffee%' THEN 'cafe'
        WHEN business_name LIKE '%school%' THEN 'school'
        ELSE 'other'
    END AS business_type
FROM
    sf_restaurant_health_violations;
    

##################################
# No: 2                          #
# Date: 29 Mar 2023              #
# ID: ID 9728                    #
# Q Name: Number of violations   #
# Diff: Medium                   #
##################################

SELECT 
    COUNT(*) num_of_violations,
    YEAR(inspection_date) year
FROM 
    sf_restaurant_health_violations
    
WHERE
    business_name = 'Roxanne Cafe' AND
    violation_id IS NOT NULL
GROUP BY YEAR(inspection_date);


###############################################
# No: 3                                       #
# Date: 30 Mar 2023                           #
# ID: ID 10353                                #
# Q Name: Workers With The Highest Salaries   #
# Diff: Medium                                #
###############################################

SELECT
    worker_title
FROM worker w
LEFT JOIN title t
ON w.worker_id = worker_ref_id
WHERE salary = (SELECT MAX(salary) FROM worker)
;


##################################
# No: 4                          #
# Date: 31 Mar 2023              #
# ID: ID 10308                   #
# Q Name: Salaries Differences   #
# Diff: Easy                     #
##################################


-- WITH cte1 AS (
--     SELECT MAX(salary) salary
--     FROM db_employee e
--     JOIN db_dept d
--     ON e.department_id = d.id
--     WHERE d.department = 'marketing'
--     GROUP BY d.department
-- ), cte2 AS(
--     SELECT MAX(salary) salary
--     FROM db_employee e
--     JOIN db_dept d
--     ON e.department_id = d.id
--     WHERE d.department = 'engineering'
--     GROUP BY d.department
-- )
-- SELECT ABS(cte1.salary - cte2.salary)
-- FROM cte1, cte2
-- ;

SELECT
    ABS(
    MAX(CASE WHEN department = 'marketing' THEN salary END) - 
    MAX(CASE WHEN department = 'engineering' THEN salary END)
    ) AS highest_salary_diff
FROM db_employee e 
JOIN db_dept d
ON e.department_id = d.id;


###########################################
# No: 5                                   #
# Date: 03 Apr 2023                       #
# ID: ID 10319                            #
# Q Name: Monthly Percentage Difference   #
# Diff: Hard                              #
###########################################

-- only year 2019

WITH cte1 AS(
    SELECT SUM(value) revenue, SUBSTRING(created_at, 1, 7) year_month
    FROM sf_transactions
    GROUP BY MONTH(created_at), SUBSTRING(created_at, 1, 7)
), cte2 AS(
    SELECT *, LAG(revenue,1) OVER(ORDER BY year_month) prev_mth_revenue
    FROM cte1
)
SELECT year_month, revenue, prev_mth_revenue,
    ROUND((CAST(revenue - prev_mth_revenue AS FLOAT) / prev_mth_revenue) * 100, 2) mom_percentage_change
FROM cte2

;



###########################################
# No: 6                                   #
# Date: 04 Apr 2023                       #
# ID: ID 9913                             #
# Q Name: Order Details                   #
# Diff: Easy                              #
###########################################

SELECT
    first_name,
    order_date,
    order_details,
    total_order_cost
FROM customers c
JOIN orders o 
ON c.id = o.cust_id
WHERE first_name IN ('Jill', 'Eva')
ORDER BY cust_id
;


###########################################
# No: 7                                   #
# Date: 05 Apr 2023                       #
# ID: ID 9894                             #
# Q Name: Employee and Manager Salaries   #
# Diff: Medium                            #
###########################################


SELECT 
    e.first_name, e.salary
FROM employee e
JOIN employee m
ON e.manager_id = m.id
WHERE e.salary > m.salary
-- If bonus is included
-- WHERE e.salary + e.bonus > m.salary + m.bonus
;

-- Avoid use self join without WHERE clause, it provides the sqaure of the original number of records
-- There are 30 records in a table and when I use self join on it, the output of self join is 900 records 

-- SELECT 
--    e.first_name, e.salary
-- FROM employee e, employee m
-- WHERE e.manager_id = m.id AND e.salary > m.salary
-- If bonus is included
-- WHERE e.manager_id = m.id AND e.salary + e.bonus > m.salary + m.bonus
;


###########################################
# No: 8                                   #
# Date: 10 Apr 2023                       #
# ID: ID 10061                            #
# Q Name: Popularity of Hack              #
# Diff: Easy                              #
###########################################

SELECT
    location,
    AVG(CAST(popularity AS FLOAT)) avg_popularity
FROM facebook_employees e
JOIN facebook_hack_survey s
ON e.id = s.employee_id
GROUP BY location
;


